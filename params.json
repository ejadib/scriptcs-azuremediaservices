{"name":"Scriptcs-azuremediaservices","tagline":"Script pack for accessing Azure Media Services from scriptcs CSX script and scriptcs REPL.","body":"scriptcs-azuremediaservices\r\n===========================\r\n\r\nWindows Azure Media Services Script Pack\r\n\r\n## What is it?\r\nScript pack for accessing Azure Media Services from scriptcs CSX script and scriptcs REPL.\r\n\r\n## Usage\r\nInstall the [nuget package](https://nuget.org/packages/ScriptCs.AzureMediaServices) by running `scriptcs -install ScriptCs.AzureMediaServices`.\r\n\r\n### Creating the Azure Media Services Client\r\n```csharp\r\nvar mediaServices = Require<AzureMediaServices>();\r\n\r\nvar client = mediaServices.CreateClient(\"mediaServicesAccountName\", \"mediaServicesAccountKey\");\r\n```\r\n\r\n### Working with Assets\r\n\r\n#### Getting all assets\r\n```csharp\r\nvar assets = client.GetAssets();\r\n```\r\n\r\n#### Getting assets by filter\r\n```csharp\r\nvar assets = client.GetAssets(a => a.AlternateId == \"mezzanine\");\r\n```\r\n\r\n#### Getting assets by Id\r\n```csharp\r\nvar myAsset = client.GetAsset(\"nb:cid:UUID:8131a85d-5999-555c-a30f-468cb087701c\");\r\n```\r\n\r\n#### Deleting an asset\r\n```csharp\r\nclient.DeleteAsset(\"nb:cid:UUID:8131a85d-5999-555c-a30f-468cb087701c\");\r\n```\r\n\r\n#### Uploading an asset\r\n```csharp\r\nvar uploader = client.CreateUploader(\"myAssetName\", @\"d:\\media\\videos\\video.mp4\");\r\nuploader.On(\r\n\t\t\tprogress: progressPercentage => Console.WriteLine(progressPercentage),\r\n\t\t\tcompleted: assetId => Console.WriteLine(assetId),\r\n\t\t\terror: exception => Console.WriteLine(exception.Message));\r\nuploader.Start();\r\n```\r\n\r\n### Working with Media Processors\r\n\r\n#### Getting all media processors\r\n```csharp\r\nvar mediaProcessors = client.GetMediaProcessors();\r\n```\r\n\r\n### Working with Jobs\r\n\r\n#### Getting jobs by Job State\r\n```csharp\r\nvar jobs = client.GetJobsByState(JobState.Finished);\r\n```\r\n\r\n#### Getting jobs by Id\r\n```csharp\r\nvar job = client.GetJob(\"nb:jid:UUID:8ba5f1ca-d23d-b847-8e7a-34d1f4ce98a7\");\r\n```\r\n\r\n#### Encoding a video (Experimental API)\r\n```csharp\r\n// CreateEncoder expects as parameters:\r\n//  - the name of job to be created\r\n//  - the input asset that will be used during the encoding process\r\n//  - the configuration or preset to be used for the encodiding process\r\n//  - the desired name for the encoding output asset\r\nvar encoder = client.CreateEncoder(\"My Job Name\", inputAsset, \"H264 Broadband 720p\", \"My Output Asset Name\");\r\nencoder.On(\r\n\t\t\tprocessing: jobId => Console.WriteLine(\"Processing Job {0}\", jobId),\r\n\t\t\tfinished: jobId => Console.WriteLine(jobId),\r\n\t\t\terror: errorMessage => Console.WriteLine(errorMessage));\r\nencoder.Start();\r\n```\r\n\r\n## What's next\r\n* Add support for more Media Services operations\r\n* Listen to community feedback.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}